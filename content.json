[{"title":"Sort Algorithm","date":"2019-12-14T04:24:56.150Z","path":"2019/12/14/Sort Algorithm/","text":"排序算法-考研数据结构&lt;摘要&gt;所谓排序，即将原本无序的序列重新排列成有序序列的过程。这个序列中的每一项可能是单独的数据元素，也可能是一条记录(记录是由多个数据元素组成的，如一个学生记录就是由学号、姓名、年龄、专业等数据元素组成的)。如果是记录，则既可以按照记录的主关键字排序(主关键字唯一标识一条记录，如学生记录中的学号就是主关键字，学号不能重复，用来唯一标识一个学生)，也可以按照记录的次关键字排序(如学生记录中的姓名、专业等都是次关键字，次关键字是可以重复的)。&emsp;&emsp;而稳定性是指当待排序序列中有两个或两个以上相同的关键字时，排序前和排序后这些关键字的相对位置，如果没有发生变化就是稳定的，否则就是不稳定的。例如，某序列有两个关键字都是50，以50(a)和50(b)来区分它们，用某种算法A对其排序，排序前50(a)在50(b)之前，如果排序后50(a)仍然在50(b)之前，则A是稳定的；如果能找出一种情况，使排序后50(a)在50(b)之后，则A是不稳定的。如果关键字不能重复，则排序结果是唯一的，那么选择的排序算法稳定与否就无关紧要；如果关键字可以重复，则在选择排序算法时，就要根据具体的需求采考虑选择稳定的还是不稳定的排序算法。 0、各排序算法的时间复杂度与空间复杂度及稳定性比较1、直接插入 算法思想：每趟将一个待排序的关键字按照其值的大小插入到已经排好的部分有序序列的适当位置上，直到所有待排关键字都被插入到有序序列中为止。 12345678910111213141516void InsertSort(int R[], int n) &#123; int i, j; int temp; for (i = 1; i &lt; n; i++) &#123; temp = R[i]; //将待插入关键字暂存在temp中 j = i - 1; /*下面这个循环完成了从待排关键字之前的关键字开始扫描，如果大于待排关键字，则后移一位*/ while (j &gt;= 0 &amp;&amp; temp &lt; R[j]) &#123; R[j + 1] = R[j]; j--; &#125; R[j + 1] = temp; //找到插入位置，将temp中暂存的待排关键字插入 &#125; //对排序了的数组输出 outPutArr(R, n);&#125; 2、希尔排序 算法思想：希尔排序又称之为缩小增量排序，其本质还是插入排序，只不过是将待排序列按照某种规则分成几个子序列，分别对这几个子序列进行直接插入排序。这个规则的体现就是增量的选取，希尔排序的时间复杂度为：O(n*logn)。 1234567891011121314void shellSort(int R[], int n)&#123; int temp; for(int gap = n/2; gap &gt; 0; gap /= 2)&#123; for(int i = gap; i &lt; n; i++)&#123; temp = R[i]; int j; for(j = i; j &gt;= gap &amp;&amp; R[j-gap] &gt; temp; j -= gap)&#123; R[j] = R[j-gap]; &#125; R[j] = temp; &#125; &#125; outPutArr(R,n);&#125; 3、冒泡排序 算法思想：假设待排序表长为n，从后往前(或从前往后)两两比较相邻元素的值，若为逆序(即A[i-1]&gt;A[i])，则交换它们，直到序列比较完。我们称它为一.趟冒泡，结果将最小的元素交换到待排序列的第一一个位置(关键字最小的元素如气泡一般逐渐往上“漂浮”直至“水面”，这就是冒泡排序名字的由来)。下一趟冒泡时，前一趟确定的最小元素不再参与比较，待排序列减少-一个元素，每趟冒泡的结果把序列中的最小元素放到了序列的最终位置，….. 这样最多做n-1趟冒泡就能把所有元素排好序。 1234567891011121314151617181920void bubbleSort(int R[], int n)&#123; int i,j; bool flag; int temp; for(i = n-1; i &gt; 0; i--)&#123; flag = false; //flag用来标记此趟排序是否发生了交换 for(j = 1; j &lt;= i; j++)&#123; if(R[j-1] &gt; R[j])&#123; temp = R[j]; R[j] = R[j-1]; R[j-1] = temp; flag = true; //如果没发生交换，则flag为0 &#125; &#125; if(!flag)&#123; //一趟排序过程中没有发生排序，则证明剩余序列有序，不在冒泡 outPutArr(R,n); return; &#125; &#125;&#125; 4、快速排序 算法思想：也是交换类的排序，它通过多次划分操作实现排序。以升序为例，其执行流程可以概括为：每一趟选择当前所有子序列中的一个关键字(通常是第一个)作为枢轴，将子序列中比枢轴小的移到枢轴的前边，比枢轴大的移动到枢轴的后边；当本趟所有的子序列都被枢轴以上述规则划分完毕后会的到新的一组更短的子序列，它们成为下一趟划分的初始序列集。快速排序的算法思想基于分治思想的，其平均时间复杂度为O(n*logn)，最坏时间复杂度为O(n^2)。 1234567891011121314151617181920212223242526void quickSort(int R[], int low, int high)&#123; int temp; int i = low, j = high; if(low &lt; high)&#123; temp = R[low]; while(i &lt; j)&#123; //将数组中小于temp的放在左边，大于temp的放在右边 while(j &gt; i &amp;&amp; R[j] &gt;= temp)&#123; //从右往左扫描，找到一个小于temp的关键字 j--; &#125; if(i &lt; j)&#123; R[i] = R[j]; //放在temp左边 i++; //右移一位 &#125; while(i &lt; j &amp;&amp; R[i] &lt; temp)&#123; //从左往右扫描，找到一个大于temp的关键字 i++; &#125; if(i &lt; j)&#123; R[j] = R[i]; //放在temp右边 j--; //左移一位 &#125; &#125; R[i] = temp; //将temp放在最终位置 quickSort(R,low,i-1); //递归的对temp左边的关键字排序 quickSort(R,i+1,high); //递归的对temp右边的关键字排序 &#125;&#125; 5、简单选择排序 算法思想：选择类排序的主要动作是“选择”。简单选择采用最简单的选择方式，从头至尾扫描序列，选出最小的一个关键字，和第一个关键字交换，接着从剩下的关键字中继续这种选择和交换，最终使序列有序。 123456789101112131415161718void selectSort(int R[], int n)&#123; int i, j, k; int temp; for(i = 0; i &lt; n; i++)&#123; k = i; /*下面这个循环是算法的关键，它从无序序列中挑出一个最小的关键字*/ for(j = i + 1; j &lt; n; j++)&#123; if(R[k] &gt; R[j])&#123; k = j; &#125; &#125; /*下面这三句完成最小关键字与无序序列第一个关键字的交换*/ temp = R[i]; R[i] = R[k]; R[k] = temp; &#125; outPutArr(R,n);&#125; 6、堆排序 算法思想：堆是一种完全二叉树,这颗二叉树满足：任何一个非叶结点的值都不大于(或小于)其左右孩子结点的值。若父亲大孩子小，这样的堆称之为大顶堆；若父亲小孩子大称为小根堆。根据堆的定义可以知道，代表堆的这颗完全二叉树的根结点是最大的(或者最小的)，因此将一个无序的序列调整为一个堆，就可以找到这个序列的最大值(或者最小)的值，然后将找出的值交换到这个序列的最后(或最前)，这样有序序列关键字增加1个，无序序列中的关键字减少1个，对新的无序序列重复这样的操作，就实现了排序。 123456789101112131415161718192021222324252627282930313233343536373839/**堆排序算法主方法*/void heapSort(int R[], int n)&#123; int i; int temp; for(i = n/2 - 1; i &gt;= 0; i--)&#123; //建立初始堆 sift(R, i, n-1); &#125; for(i = n-1; i &gt; 0; i--)&#123; //进行n-1次循环，完成堆排序 temp = R[0]; //一下3句换出根节点的关键字，将其放入最终位置 R[0] = R[i]; R[i] = temp; sift(R, 0, i-1); //在减少了一个关键字的无序序列中调整 &#125; outPutArr(R, n);&#125;/**堆的局部调整方法*/void sift(int R[] ,int low, int high)&#123; //关键字设定下表从0开始 int i = low,j = 2*i + 1; //R[j]是R[i]的左孩子节点 int temp = R[i]; while(j &lt;= high)&#123; if(j &lt; high &amp;&amp; R[j] &lt; R[j+1])&#123; //若右孩子较大，则j指向右孩子 j++; //j变为2*i+2 &#125; if(temp &lt; R[j])&#123; R[i] = R[j]; //将R[j]调整到双亲节点的位置 i = j; //修改i和j的值，继续向下调整 j = 2*i + 1; &#125;else&#123; break; //调整结束 &#125; &#125; R[i] = temp; //被调整节点放入最终位置&#125; 7、归并排序 算法思想：二路归并排序是采用的分而治之的思想。将一个待排序的序列分成两个序列，分别对这两个序列排序。而对于这两个序列排序的方式也是和之前一样，将这两个序列分别分成两个序列分别排序。一直这样分割下去，知道序列中没有元素或者只有一个元素为止。因为没有元素的序列和只有一个元素的序列定是一个有序的序列，所以相当于将这个序列排序完毕，向上返回。返回的过程中做的最重要的一件事就是将两个有序的序列合并成一个有序的序列。所以归并排序最重要的两步是分割和合并。 123456789101112131415161718192021222324252627282930313233343536373839/**归并排序主方法*/void mergeSort(int R[], int low, int high)&#123; if(low &lt; high)&#123; int mid = (low + high) / 2; mergeSort(R, low, mid); //归并排序前半段 mergeSort(R, mid + 1, high); //归并排序后半段 merge(R, low, mid, high); //将R数组中low~mid,mid~high两段序列归并为一个序列 &#125;&#125;/**将两个序列归并为一个有序序列*/void merge(int R[], int low, int mid, int high)&#123; int i, j, k; int n1 = mid - low + 1; int n2 = high - mid; int left[n1], right[n2]; //此处在C++和C里会有编译错误，解决办法是将测试用例的逻辑结构改为一般线性表或者用Java语言实现该算法 for(i = 0; i &lt; n1; i++)&#123; left[i] = R[low + i]; &#125; for(j = 0; j &lt; n2; j++)&#123; right[j] = R[mid + 1 + j]; &#125; i = 0; j = 0; k = low; while(i &lt; n1 &amp;&amp; j &lt; n2)&#123; if(left[i] &lt;= right[j])&#123; R[k] = left[i++]; &#125;else&#123; R[k] = right[j++]; &#125; k++; &#125; while(i&lt;n1)&#123; R[k++] = left[i++]; &#125; while(j&lt;n2)&#123; R[k++] = right[j++]; &#125;&#125;","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://blog.eaglelee.cn/tags/Algorithm/"},{"name":"Sort","slug":"Sort","permalink":"https://blog.eaglelee.cn/tags/Sort/"}]},{"title":"First Night","date":"2019-11-30T02:13:43.174Z","path":"2019/11/30/first/","text":"&lt;摘要&gt;该博客系统是基于Hexo主题和GitHub服务搭建起来的静态博客页面，在本次搭建博客时遇到了一些问题，现作以陈述，希望能给大家一点帮助………… 1. 主题配置 一定要区分Hexo根目录下的总配置文件_config.yml和theme目录下的_config.yml; 评论功能建议使用Gitalk,这个评论模块是基于GitHub的issue的，用户若需要评论，需要登录自己的GitHub账号并于博主的OAuth Apps账号 OAuth Apps 注册OAuthApps的参数配置 2. 参考文献 B-Tree WiKipedia pdfObject插件测试区 Download PDF 这是个404测试链接 网易云音乐外链 &emsp; &emsp;","tags":[{"name":"test","slug":"test","permalink":"https://blog.eaglelee.cn/tags/test/"}]},{"title":"The README of BlueLake","date":"2019-11-29T11:34:00.709Z","path":"2019/11/29/README-Hexo/","text":"BlueLakeEnglish | 简体中文 一个简洁轻量化的响应式Hexo博客主题。 点击预览【深色主题】、【浅色主题】 安装安装主题和渲染:123$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake$ npm install hexo-renderer-jade@0.3.0 --save$ npm install hexo-renderer-stylus --save 启用在Hexo配置文件（hexo/_config.yml）中把主题设置修改为BlueLake。 1theme: BlueLake 如果你想生成压缩后的css，在（hexo/_config.yml）中添加： 12stylus: compress: true 更新12cd themes/BlueLakegit pull 配置打开themes/BlueLake/_config.yml进行配置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146############################ Site Config Settings ############################# Theme versionversion: 2.0.2# Theme tonedark: false #true/false #切换为true,即可体验深色主题# Headermenu: - page: home directory: . icon: fa-home - page: archive directory: archives/ icon: fa-archive - page: about directory: about/ icon: fa-user - page: rss directory: atom.xml icon: fa-rss# Sidebarwidgets: - recent_posts - category - tag - archive #- weibo - links# Toctoc: enable: true number: false# Static filesjs: jscss: cssshare_path: share# ExtensionsPlugins: hexo-generator-feed hexo-generator-sitemap hexo-generator-baidu-sitemap#Feed Atomfeed: type: atom path: atom.xml limit: 20#sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml#Local searchlocal_search: true ## Use a javascript-based local search engine, true/false.#Copyrightcopyright: enable: true #display article copyright information, true/false. describe: #copyright description # MathJax Supportmathjax: enable: false #true/false. cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML#Cmmentscomment: duoshuo: #chaooo ## duoshuo_shortname disqus: ## disqus_shortname livere: ## 来必力(data-uid) uyan: ## 友言(uid) cloudTie: ## 网易云跟帖(productKey) changyan: ## 畅言需在下方配置两个参数，此处不填。 appid: ## 畅言(appid) appkey: ##畅言(appkey) gitalk: enable: false ## If you want to use Gitment comment system please set the value to true. owner: ## Your GitHub ID, e.g. username repo: ## The repository to store your comments, make sure you're the repo's owner, e.g. gitalk.github.io client_id: ## GitHub client ID, e.g. 75752dafe7907a897619 client_secret: ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50 admin: ## Github repo owner and collaborators, only these guys can initialize github issues. language: zh-CN ## Language pagerDirection: last # Comment sorting direction, available values are last and first.#Shareshare: local_share: true ##本地分享 baidu_share: #true ## 百度分享 JiaThis_share: ##true ##JiaThis分享 duoshuo_share: #true ##true 多说分享必须和多说评论一起使用。 addToAny_share: # AddToAny share. Empty list hides. List items are service name at url. For ex: email for '&lt;a href=\"https://www.addtoany.com/add_to/email?linkurl=...' # - twitter # - baidu # - facebook # - google_plus # - linkedin # - email# Analyticsgoogle_analytics: ## Your Google Analytics tracking id, e.g. UA-42025684-2baidu_analytics: ## Your Baidu Analytics tracking id, e.g. 1006843030519956000# Miscellaneousshow_category_count: true ## If you want to show the count of categories in the sidebar widget please set the value to true.widgets_on_small_screens: true ## Set to true to enable widgets on small screens.busuanzi: true ## If you want to use Busuanzi page views please set the value to true.# About pageabout: photo_url: ## Your photo e.g. http://cdn.chaooo.top/hexo/Avatar.jpg items: - label: email url: ## Your email with mailto: e.g. mailto:zhenggchaoo@gmail.com title: ## Your email e.g. zhenggchaoo@gmail.com - label: github url: ## Your github'url e.g. https://github.com/chaooo title: ## Your github'name e.g. chaooo - label: weibo url: ## Your weibo's url e.g. http://weibo.com/zhengchaooo title: ## Your weibo's name e.g. 秋过冬漫长 - label: twitter url: title: - label: facebook url: title:# Friend linklinks: - title: site-name1 url: http://www.example1.com/ - title: site-name2 url: http://www.example2.com/ - title: site-name3 url: http://www.example3.com/ version - 用于自动刷新CDN上的静态文件。 menu - 导航菜单。 widgets - 侧边栏中的窗口小部件。 Toc - 文章目录 Static files - 静态文件目录，以方便CDN使用。 Local search self_search - 默认本地JS搜索. Cmments duoshuo - 若使用多说评论，注册多说后在这填写short_name(用于评论与分享)。 disqus - 若使用Disqus评论，注册Disqus后在这填写short_name。 livere- 若使用来必力评论，注册来必力,获得data-uid。 uyan - 若使用友言评论，注册友言,获得uid。 cloudTie - 若使用网易云跟帖评论，注册网易云跟帖,获得productKey。 changyan - 若使用畅言评论，注册畅言，获得appid，appkey。 About page - 关于我页面(hexo new page ‘about’)。 links - 友情链接。 Miscellaneous show_category_count - 是否在侧边栏分类中显示类别的数量（true/false）. widgets_on_small_screens - 小屏幕下侧边栏在底部显示. busuanzi - 用Busuanzi来统计网站访问量. google_analytics - Google Analytics tracking ID。 baIDu_analytics - Baidu Analytics tracking ID。 特征站点图标您可以准备一张ico格式并命名为** favicon.ico **，请将其放入hexo目录的source文件夹，建议大小：32px * 32px。 您可以为苹果设备添加网站徽标，请将名为** apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px * 114px。 添加站点关键字请在hexo目录的“hexo/_config.yml”中添加keywords字段，如： 1234567# Sitetitle: Hexosubtitle: 副标题description: 网站简要描述,如：Charles·Zheng's blog.keywords: 网站关键字, key, key1, key2, key3author: Charleslanguage: zh-CN 设置阅读全文您可以在文章的 front-matter 中添加 description，并提供文章摘录，或在文章中使用‘‘&lt;!--more--&gt;’’手动进行截断（Hexo推荐的方式）。 自定义page页面在source文件夹中创建文件夹index.md来添加页面，并在index.md的front-matter&#39;中添加layout：page。 Create folders inlcudingindex.mdinsourcefolder to add pages, and add alayout: pageinfront-matterofindex.md`. About页面此主题默认page页面是关于我页面的布局，生成一个关于我页面： 1$ hexo new page 'about' 配置照片地址、邮箱、微博链接、微博名、GitHub链接、Github名： 123456789101112131415161718192021222324# About pageabout: photo_url: ## Your photo e.g. http://cdn.chaooo.top/hexo/Avatar.jpg items: - label: email icon: fa-email url: ## Your email with mailto: e.g. mailto:zhenggchaoo@gmail.com title: ## Your email e.g. zhenggchaoo@gmail.com - label: github icon: fa-github url: ## Your github'url e.g. https://github.com/chaooo title: ## Your github'name e.g. chaooo - label: weibo icon: fa-weibo url: ## Your weibo's url e.g. http://weibo.com/zhengchaooo title: ## Your weibo's name e.g. 秋过冬漫长 - label: twitter icon: fa-twitter url: title: - label: facebook icon: fa-facebook url: title: 点击预览About页面 代码语法高亮请在hexo目录的“hexo/_config.yml”中设置“highlight”选项，如下所示： 12345highlight: enable: true auto_detect: true line_number: true tab_replace: 本地搜索如果要使用本地站点搜索，您必须安装插件hexo-generator-json-content来创建JSON搜索文件 ，然后将配置添加到hexo/_config.yml： 1$ npm install hexo-generator-json-content@2.2.0 --save 然后在hexo/_config.yml添加配置： 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 语言该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）,欢迎修改主题并翻译成其他语言。 评论目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论、基于Github Issue的GITALK，推荐gitalk。 需要 GitHub Application，如果没有点击这里申请。 Application name： 应用名称，随意 Homepage URL： 网站URL，对应自己博客地址 Application description ：描述，随意 Authorization callback URL：# 网站URL，博客地址就好 点击注册，页面会出现其中Client ID和Client Secret在后面的配置中需要用到 配置主题_config.yml： 主题_config.ymlthemes/BlueLake/_config.yml1234567891011#Cmmentscomment: gitalk: enable: true ## 开启gitalk owner: ## GitHub的用户名 repo: ## 此评论存放的GitHub仓库 client_id: ## 复制刚才生成的clientID，例如. 75752dafe7907a897619 client_secret: ## 复制刚才生成的clientSecret，例如. ec2fb9054972c891289640354993b662f4cccc50 admin: ## Github的用户名 language: zh-CN ## Language pagerDirection: last # Comment sorting direction, available values are last and first. Solutions 检查您当前的hexo的根目录，是否包含source /，themes /等。 如果你在使用这个主题有任何问题，请随时打开一个issue，或者给我发邮件zhenggchaoo@gmail.com。 浏览器支持 LicenseMIT License 贡献欢迎各种形式的贡献（增强功能，添加新功能，撰写文档，改进代码，提交问题和检查BUG…）。 期待您的pull request。","tags":[{"name":"README","slug":"README","permalink":"https://blog.eaglelee.cn/tags/README/"}]},{"title":"会声会影2019 简易版+汉化包+序列号","date":"2019-11-25T04:30:17.456Z","path":"2019/11/25/会声会影2019 简易版+汉化包+序列号/","text":"您好, 请在这里输入密码.d6b9de7222be8d245640b60427aa4a5b728cbaca40218820d9a4de04525e0afe7eeee33ec9926a31497180020b8fbd9ebf088a6c22522e24d7fe0ff8691c54db442e19ba6e2dd0c4f07d65a6422925d93baac2975b401d5841f3b240bc122d20a29a01173cfa9d36cc7d1139186dc97ca922a257c172034939f5c8ca08166ed7b6a3c79e0249a6cbb2d642d245919bf856e718d0c4d0fbe4c21ba3e3ab55dcbb22e6ee271433d46fe5a46377c4017825f1ab424679c5af47a17911b3fa10f8bd76b7abb72553c4d953905cfc93f63cd3ef2a80cec5d069c8f9a07494ea0f4420c0e0f5383752262d632d6cae39b908f353fee4cf7846b9e153a124b42724258ec7e95e7262dd48a7813eaed248877e187d4f05e1b7d0752adb83b06594ee7623bdd9cc5a5b578348c14e5683fa32895afadaaacc0ce7356c5c90013a7aed03ac7818aca1d8da5d3358a235efa757e6f78435422d2184137b99c6059078459bfb7e4fa2cf65fa8ee5bc6978e76b686a23abe5c9eb23fbd5ae98b57a51323076b676797e94899604e77795a1185c02ab0bf7c5e9aca75750a2350fbcb0ecea76e9f1c8c64cff0eb358471ae82634ed860aaba1f2f9887615f7a5be0fbe2a3f4acffffc2c5e417c75fd67115777a2ad31b35b6980b84c592647a2533bdf2df58db8ad5d364b99affb7758f493639030cccd0e3b5e849339b5cd3dbce3ab7da75daac0951955e482c8f966d19cde4034fa8bf8dc37aba221ade09ff7802b509454b087732b28cae640d8975d3cca0e27c2d2682f28e5f6720b22c7908863b7e7a1719f51c96699f216fe802c408f93fe267c623103d21c112caff7b0f810a6e77ae67efae596638d3e1cf2940b1bb38c8b63f4ccef53ce024eb07d548083e3a35816e158b7dbf3e959a6b0d26703009f3dc58e616fe943571bbfe80fc378e9cd36e12466711cb51d80a24f1bb7d0616c8994512e447b6250f04e5a314ee9c8cd77a484cfc204823046e29c8b03e890e674b4aa36b823d71b27bb053239a6e47eaa6d41aab36c8691e937c4f667ec20229989d2da4bc4cf6e06b1ae21001b0e172f912563e4140dcf18da6077c79b1461bfa36aa7aef698d23926b0c9fe96985a090cda186019d6b638823208fe8afd330e7359b2103bc41f36704d5edf06ee8a9af23397967eaede282b83246c0ffc47a7ff4ce1fc919e35b2fbfe58ff30d54e4d25f87c9e4de51eb31dc7c5a841e7a359702f370592e4bcbc561a6f08f9b890e40af32d8f0a44f0f4d28afc0dc5c1cf7ea24be55e3c58aea0b22b32171b843b47f060abe3455da2a3e87e4dafb02ded07206dd3a249c491d46b2c77d282bd466df31e19fe619926b990c65256461b228ed4c271352247f9952c47c79d21d57069b148d23dcb15ea24829c98c0309dee309e72c0c6f8a963793d0d184eb7b52cf5acee421f0923b2e8fc4dd9b9a5712ea66e69ff2e6666365e98ee4fb7b47c34d46ab74e3d22f53ca2db8cc353adb3ab3986c89d4080b4142e4a87fe16c0e432cc4b4fcb99d629b9e5df9a119b14ffbbc88ce6c3c25f607e1c3baef382fee0977313732257f895ac137810cc21b40089af9ce6d4281d24a9229a71c646739b364ea1369697f49a3e68a9e1110252374028928024e13946500f62e5787958520a3b95248d830b746240e0285a038a0821f972d31de1be441cc93eb7013cdff180f56b042586bfca7ea1007abda831fc153a6a5393758fa3b248eed664b7b681fd7362725d7846104b85b5bc284e927221f0dca7dd359f51d2aa7f78d1d15d57f95efe","tags":[{"name":"Corel videoStudioPro2019","slug":"Corel-videoStudioPro2019","permalink":"https://blog.eaglelee.cn/tags/Corel-videoStudioPro2019/"}]},{"title":"MarkDown基础语法","date":"2019-11-24T14:05:45.650Z","path":"2019/11/24/MarkDown基础语法/","text":"Markdown开篇之作一、开始1、第一个Java程序 123public static void main(String args[])&#123; System.out.println(\"Hello,World!!!\");&#125; (1):逐行解释①：作用于修饰符 静态方法关键字 返回值类型 函数名 (形参类型 形参名) {②：调用库函数输出一个字符串&quot;Hello,World!!!&quot;; 2、Java的基本数据类型 图片测试 引用测试 引用1 引用2 引用3 超链接测试点我去必应点我试试 删除线测试H饿了咯 列表及列表嵌套测试 1 34 3 56 4 12 34 12 56 23 34 56 67 23 23 88 34 0.45 表格测试 姓名 技能 排行 武力值 刘备 双股剑 1 1000 关羽 青龙偃月刀 2 5000 张飞 丈八蛇矛 3 4500 代码测试 12345#include&lt;stdio.h&gt;int main()&#123; print(\"%s\\n\",\"Helllo,World!!!\"); return 0;&#125; 流程图测试 1H ……..","tags":[]},{"title":"Calculator","date":"2019-11-22T04:54:17.985Z","path":"2019/11/22/calc/","text":"Calcuator *{ margin: 0px 0px; } #div1{ width: 50%; height: 580px; border: solid gray 2px; margin: auto; text-align: center; background: cornflowerblue; } textarea{ width: 99%; height: 18%; border: solid darkslategray 2px; resize: none; font-size: 1.5em; font-weight: 1000; color:// } input{ color:cornflowerblue; width: 23%; height: 13%; background: greenyellow; font-size: 2em; margin: 5px 0px; } tr td:hover{ background: darkgray; } tr td:active{ background: dimgray; } function display(nums) { var content = document.getElementById(\"txtArea\"); content.value = content.value + nums; } function calcs() { var result = eval(document.getElementById(\"txtArea\").value); document.getElementById(\"txtArea\").value = \"\"; document.getElementById(\"txtArea\").value = result; } function clears() { document.getElementById(\"txtArea\").value = \"\"; } Calcuator","tags":[{"name":"test","slug":"test","permalink":"https://blog.eaglelee.cn/tags/test/"}]},{"title":"VsCode for Vue","date":"2019-11-21T08:47:10.457Z","path":"2019/11/21/VsCode for Vue/","text":"VsCode for VueVsCode安装 Visual Studio Code下载地址https://code.visualstudio.com/Download 下载页面中，用户可选择“user”和“system”两种版本。目前“system”被推荐使用，它能同时打开多个窗体副本，而“user”只能打开一个实例。 Node.js安装 Node.js下载地址https://nodejs.org/en/ 推荐下载最新稳定版本，例如10.16.0 LTS 安装包管理器yarn，比npm效率高， 运行控制台命令npm install -g yarn 在Vue项目的根目录下，运行yarn install，下载项目需要的依赖 编译Vue项目，运行yarn run build 调试模式启动Vue项目，运行yarn run serve 安装Vue的相关插件 ESlint 语法纠错 安装插件： Ctrl + P 然后输入 ext install eslint 然后回车点安装即可。 还需要一些环境和配置： 首先，需要全局的 ESLint , 使用npm或yarn来安装，运行yarn install -g eslint 其次，vue文件是类 HTML 的文件，为了支持对 vue 文件的 ESLint ，需要 eslint-plugin-html 这个插件。可以使用 yarn install -g eslint-plugin-html 来安装 接着，还需要在 vscode 中配置下 ESLint： 123456789\"eslint.validate\": [ \"javascript\", \"javascriptreact\", \"html\", \"vue\"],\"eslint.options\": &#123; \"plugins\": [\"html\"]&#125;, 最后，别忘了在项目根目录下创建 .eslintrc.json , 如果还没创建，还可以使用下面快捷命令来创建：eslint c 这样一来 vue 中写的 js 代码也能正确地被 lint 了。 HTML CSS Support 让 html 标签上写class 智能提示当前项目所支持的样式 HTML Snippets Npm Dependency Output Colorizer Vetur 语法高亮、智能感知、Emmet等 包含格式化功能， Alt+Shift+F （格式化全文），Ctrl+K Ctrl+F（格式化选中代码，两个Ctrl需要同时按着） 安装插件： Ctrl + P 然后输入 ext install vetur 然后回车点安装即可。 安装完插件后，需要以下配置 1234\"emmet.syntaxProfiles\": &#123; \"vue-html\": \"html\", \"vue\": \"html\"&#125; 这时可以打开一个vue文件试试，注意下右下角状态栏是否正确识别为 vue 类型. vscode-icons Auto Close Tag 自动闭合HTML/XML标签 Auto Rename Tag 自动完成另一侧标签的同步修改 JavaScript(ES6) code snippets ES6语法智能提示以及快速输入， 除js外还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含js代码文件的时间 Path Intellisense 自动路劲补全 Vue VSCode Snippets vue-devtools chrome和firefox的vue开发插件 从https://github.com/vuejs/vue-devtools/releases下载解压， cd vue-devtools yarn install 修改manifest.json文件&quot;persistent&quot;:false yarn run build Chrome浏览器 &gt; 更多程序 &gt; 拓展程序 点击加载已解压程序按钮, 选择 vue-devtools &gt; shells &gt; chrome目录拖放到chrome安装, 14.Vue 2 Snippets vue 2 脚手架 在VS Code中编译运行Vueyarn run build 在VS Code中调试Vueyarn run serve Git代码管理码云 注册gitee.com的帐号 登录后，点击个人中的设置 在自己的电脑上创建公钥（如果已经创建过，跳过此处） 下载安装Git下载地址 打开git bash，分别执行以下两句命令 12git config --global user.name \"用户名\"git config --global user.email \"你的email\" 执行生成公钥和私钥的命令ssh-keygen -t rsa -C &quot;你的email&quot; 并按回车3下（为什么按三下，是因为有提示你是否需要设置密码，如果设置了每次使用Git都会用到密码，一般都是直接不写为空，直接回车就好了） 秘钥会生成到C:\\Users\\你的用户名.ssh目录中 添加自己的SSH公钥 把 C:\\Users\\你的用户名.ssh 中的 id_rsa.pub 文件内容，粘帖到码云的个人公钥的文本框中，并添加。 在码云上创建自己的项目，创建过程中不要选勾任何项目。 复制粘帖新创建的项目的git地址 本地代码的处理 cd 本地工程目录 初始化本地仓储git init 显示文件的当前状态git status 添加未跟踪的文件git add . 提交更改到本地仓储git commit -m &quot;init my project&quot; 设置远程git并提交 设置远程仓储的git地址（下面地址只是个例子，替换成你自己的）git remote add origin https://gitee.com/vsdeve/sdfs.git 将本地代码推送到远端git库中git push -u origin master","tags":[{"name":"vue","slug":"vue","permalink":"https://blog.eaglelee.cn/tags/vue/"}]},{"title":"搭建自己的第一个博客简易教程","date":"2019-11-20T17:08:10.801Z","path":"2019/11/21/personal blog/","text":"搭建自己的第一个博客简易教程参考教程-基础搭建参考教程-博客优化文章中的图片问题-已解决文章加密 step1:创建Github 域名和空间step2:下载安装 Node.js(尽量高版本的)， Git, Hoex博客框架special 使用Hexo-image插件来加载图片时正确的做法: 使用Hexo new test命令来创建一篇名为“test”的文章，同时会自动在”source/_post”下生成一个同名为“test”的文件夹； 在文章中引用图片时，先在刚才生成的文件夹下放好你需要引入的图片(假设图片为“xxx.png”)，此时，传统MarkDown图片加载语法是失效的，应该用这样的语法![name](xxx.png title)；","tags":[{"name":"test","slug":"test","permalink":"https://blog.eaglelee.cn/tags/test/"}]},{"title":"输入一个整数，输出若干个和为这个整数的连续序列","date":"2019-11-20T15:08:36.055Z","path":"2019/11/20/polyformula/","text":"输入一个整数，输出若干个和为这个整数的连续序列(Java实现)-1234– 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import java.util.Scanner;import org.junit.Test; public class TestIntegersSum &#123; public static void main(String[] args) &#123; new TestIntegersSum().integerSum(); &#125; @SuppressWarnings(\"resource\")@Test public void integerSum()&#123; System.out.println(\"请输入一个整数:\"); Scanner scan = new Scanner(System.in); int scanNum = scan.nextInt(); //判断输入的是否是负数或正数 boolean minusFlag = false; if(scanNum&lt;0)&#123; scanNum = -scanNum; minusFlag = true; &#125; boolean hasflag = false; for (int i = 1; i &lt;= scanNum / 2; i++) &#123; int num = i; for (int j = i+1; j &lt; scanNum; j++) &#123; num += j; if (num &gt; scanNum) &#123; break; &#125; else if (num == scanNum) &#123; for (int k = i; k &lt;= j; k++) &#123; if(!minusFlag)&#123; if (k &lt; j) &#123; System.out.print(k + \",\"); &#125; else if (k == j) &#123; System.out.println(k); &#125; &#125;else&#123; if (k &lt; j) &#123; System.out.print(-k + \",\"); &#125; else if (k == j) &#123; System.out.println(-k); &#125; &#125; &#125; hasflag = true; break; &#125; &#125; &#125; if(!hasflag)&#123; System.out.println(\"none\"); &#125; &#125;&#125; -234–计算多项式值两种不同的计算方法时间比较1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;stdio.h&gt;#include &lt;math.h&gt;#include &lt;time.h&gt;#define MAXN 10#define MAXK 1e7clock_t start, stop;double duration;double f1(int n, double a[], double x);//循环方法实现计算double f2(int n, double a[], double x);//秦九韶算法实现计算int main()&#123; int i; double a[MAXN]; for (i = 0; i &lt;= MAXN ; i++) a[i] = (double)i; start = clock(); for (i = 0; i &lt;= MAXK;i++) f1(MAXN - 1, a, 1.1); stop = clock(); duration = ((double)(stop - start)) / CLK_TCK / MAXK; printf(\"ticks1 = %f\\n\", (double)(stop - start)); printf(\"duration1 = %6.2e\\n\",duration); start = clock(); for (i = 0; i &lt;= MAXK; i++) f2(MAXN - 1, a, 1.1); stop = clock(); duration = ((double)(stop - start)) / CLK_TCK / MAXK; printf(\"ticks2 = %f\\n\", (double)(stop - start)); printf(\"duration2 = %6.2e\\n\", duration);&#125;double f1(int n, double a[], double x)&#123; int i; double p = a[0]; for (i = 1; i &lt;= n; i++) p += (a[i] * pow(x, i)); return p;&#125;double f2(int n, double a[], double x)&#123; int i; double p = a[n]; for (i = n; i &gt; 0; i--) p = a[i - 1] + x*p; return p;&#125;","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://blog.eaglelee.cn/tags/Algorithm/"}]},{"title":"Hello World","date":"2019-11-20T13:53:24.859Z","path":"2019/11/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"HelloWorld","slug":"HelloWorld","permalink":"https://blog.eaglelee.cn/tags/HelloWorld/"}]}]